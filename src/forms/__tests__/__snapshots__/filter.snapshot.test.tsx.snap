// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`filter 搜索框快照 mount 快照 1`] = `
<Filter
  onSearch={[MockFunction]}
>
  <ForwardRef(InternalForm)
    form={
      Object {
        "__INTERNAL__": Object {
          "itemRef": [Function],
          "name": undefined,
        },
        "_init": true,
        "getFieldError": [Function],
        "getFieldInstance": [Function],
        "getFieldValue": [Function],
        "getFieldWarning": [Function],
        "getFieldsError": [Function],
        "getFieldsValue": [Function],
        "getInternalHooks": [Function],
        "isFieldTouched": [Function],
        "isFieldValidating": [Function],
        "isFieldsTouched": [Function],
        "isFieldsValidating": [Function],
        "resetFields": [Function],
        "scrollToField": [Function],
        "setFields": [Function],
        "setFieldsValue": [Function],
        "submit": [Function],
        "validateFields": [Function],
      }
    }
    onFinish={[MockFunction]}
  >
    <SizeContextProvider>
      <ForwardRef(Form)
        className="ant-form ant-form-horizontal"
        form={
          Object {
            "__INTERNAL__": Object {
              "itemRef": [Function],
              "name": undefined,
            },
            "_init": true,
            "getFieldError": [Function],
            "getFieldInstance": [Function],
            "getFieldValue": [Function],
            "getFieldWarning": [Function],
            "getFieldsError": [Function],
            "getFieldsValue": [Function],
            "getInternalHooks": [Function],
            "isFieldTouched": [Function],
            "isFieldValidating": [Function],
            "isFieldsTouched": [Function],
            "isFieldsValidating": [Function],
            "resetFields": [Function],
            "scrollToField": [Function],
            "setFields": [Function],
            "setFieldsValue": [Function],
            "submit": [Function],
            "validateFields": [Function],
          }
        }
        onFinish={[MockFunction]}
        onFinishFailed={[Function]}
      >
        <form
          className="ant-form ant-form-horizontal"
          onReset={[Function]}
          onSubmit={[Function]}
        >
          <Row
            gutter={24}
          >
            <div
              className="ant-row"
              role="row"
              style={
                Object {
                  "marginLeft": -12,
                  "marginRight": -12,
                }
              }
            >
              <Col
                span={8}
              >
                <div
                  className="ant-col ant-col-8"
                  role="cell"
                  style={
                    Object {
                      "paddingLeft": 12,
                      "paddingRight": 12,
                    }
                  }
                >
                  <FormItem
                    hasFeedback={true}
                    initialValue="china"
                    label="Select"
                    name="select"
                  >
                    <WrapperField
                      hasFeedback={true}
                      initialValue="china"
                      label="Select"
                      messageVariables={
                        Object {
                          "label": "Select",
                        }
                      }
                      name="select"
                      onMetaChange={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                    >
                      <Field
                        fieldContext={
                          Object {
                            "__INTERNAL__": Object {
                              "itemRef": [Function],
                              "name": undefined,
                            },
                            "_init": true,
                            "getFieldError": [Function],
                            "getFieldInstance": [Function],
                            "getFieldValue": [Function],
                            "getFieldWarning": [Function],
                            "getFieldsError": [Function],
                            "getFieldsValue": [Function],
                            "getInternalHooks": [Function],
                            "isFieldTouched": [Function],
                            "isFieldValidating": [Function],
                            "isFieldsTouched": [Function],
                            "isFieldsValidating": [Function],
                            "resetFields": [Function],
                            "scrollToField": [Function],
                            "setFields": [Function],
                            "setFieldsValue": [Function],
                            "submit": [Function],
                            "validateFields": [Function],
                            "validateTrigger": "onChange",
                          }
                        }
                        hasFeedback={true}
                        initialValue="china"
                        key="_select"
                        label="Select"
                        messageVariables={
                          Object {
                            "label": "Select",
                          }
                        }
                        name={
                          Array [
                            "select",
                          ]
                        }
                        onMetaChange={[Function]}
                        trigger="onChange"
                        validateTrigger="onChange"
                        valuePropName="value"
                      >
                        <Row
                          className="ant-form-item"
                          key="row"
                        >
                          <div
                            className="ant-row ant-form-item"
                            role="row"
                            style={Object {}}
                          >
                            <FormItemLabel
                              hasFeedback={true}
                              htmlFor="select"
                              initialValue="china"
                              label="Select"
                              name="select"
                              prefixCls="ant-form"
                              required={false}
                              requiredMark={true}
                            >
                              <Col
                                className="ant-form-item-label"
                              >
                                <div
                                  className="ant-col ant-form-item-label"
                                  role="cell"
                                  style={Object {}}
                                >
                                  <label
                                    className=""
                                    htmlFor="select"
                                    title="Select"
                                  >
                                    Select
                                  </label>
                                </div>
                              </Col>
                            </FormItemLabel>
                            <FormItemInput
                              errors={Array []}
                              hasFeedback={true}
                              initialValue="china"
                              label="Select"
                              name={Array []}
                              prefixCls="ant-form"
                              status=""
                              touched={false}
                              validating={false}
                              warnings={Array []}
                            >
                              <Col
                                className="ant-form-item-control"
                              >
                                <div
                                  className="ant-col ant-form-item-control"
                                  role="cell"
                                  style={Object {}}
                                >
                                  <div
                                    className="ant-form-item-control-input"
                                  >
                                    <div
                                      className="ant-form-item-control-input-content"
                                    >
                                      <Component
                                        update={
                                          <ForwardRef(InternalSelect)
                                            placeholder="Please select a country"
                                          >
                                            <Option
                                              value="china"
                                            >
                                              China
                                            </Option>
                                            <Option
                                              value="usa"
                                            >
                                              U.S.A
                                            </Option>
                                          </ForwardRef(InternalSelect)>
                                        }
                                        value="china"
                                      >
                                        <ForwardRef(InternalSelect)
                                          id="select"
                                          onChange={[Function]}
                                          placeholder="Please select a country"
                                          value="china"
                                        >
                                          <Select
                                            className="ant-select-in-form-item ant-select-has-feedback"
                                            clearIcon={<ForwardRef(CloseCircleFilled) />}
                                            dropdownClassName=""
                                            id="select"
                                            inputIcon={[Function]}
                                            listHeight={256}
                                            listItemHeight={24}
                                            menuItemSelectedIcon={null}
                                            notFoundContent={
                                              <Context.Consumer>
                                                [Function]
                                              </Context.Consumer>
                                            }
                                            onChange={[Function]}
                                            placeholder="Please select a country"
                                            placement="bottomLeft"
                                            prefixCls="ant-select"
                                            removeIcon={<ForwardRef(CloseOutlined) />}
                                            showArrow={true}
                                            transitionName="ant-slide-up"
                                            value="china"
                                          >
                                            <BaseSelect
                                              OptionList={
                                                Object {
                                                  "$$typeof": Symbol(react.forward_ref),
                                                  "displayName": "OptionList",
                                                  "render": [Function],
                                                }
                                              }
                                              activeDescendantId="select_list_0"
                                              activeValue={null}
                                              className="ant-select-in-form-item ant-select-has-feedback"
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              displayValues={
                                                Array [
                                                  Object {
                                                    "disabled": undefined,
                                                    "key": "china",
                                                    "label": "China",
                                                    "value": "china",
                                                  },
                                                ]
                                              }
                                              dropdownClassName=""
                                              dropdownMatchSelectWidth={true}
                                              emptyOptions={false}
                                              id="select"
                                              inputIcon={[Function]}
                                              notFoundContent={
                                                <Context.Consumer>
                                                  [Function]
                                                </Context.Consumer>
                                              }
                                              omitDomProps={
                                                Array [
                                                  "inputValue",
                                                ]
                                              }
                                              onDisplayValuesChange={[Function]}
                                              onSearch={[Function]}
                                              onSearchSplit={[Function]}
                                              placeholder="Please select a country"
                                              placement="bottomLeft"
                                              prefixCls="ant-select"
                                              removeIcon={<ForwardRef(CloseOutlined) />}
                                              searchValue=""
                                              showArrow={true}
                                              transitionName="ant-slide-up"
                                            >
                                              <div
                                                className="ant-select ant-select-in-form-item ant-select-has-feedback ant-select-single ant-select-show-arrow"
                                                onBlur={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                onMouseDown={[Function]}
                                              >
                                                <SelectTrigger
                                                  containerWidth={null}
                                                  dropdownClassName=""
                                                  dropdownMatchSelectWidth={true}
                                                  empty={false}
                                                  getTriggerDOMNode={[Function]}
                                                  onPopupMouseEnter={[Function]}
                                                  placement="bottomLeft"
                                                  popupElement={<OptionList />}
                                                  prefixCls="ant-select"
                                                  transitionName="ant-slide-up"
                                                >
                                                  <Trigger
                                                    action={Array []}
                                                    afterPopupVisibleChange={[Function]}
                                                    autoDestroy={false}
                                                    blurDelay={0.15}
                                                    builtinPlacements={
                                                      Object {
                                                        "bottomLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tl",
                                                            "bl",
                                                          ],
                                                        },
                                                        "bottomRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tr",
                                                            "br",
                                                          ],
                                                        },
                                                        "topLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "bl",
                                                            "tl",
                                                          ],
                                                        },
                                                        "topRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "br",
                                                            "tr",
                                                          ],
                                                        },
                                                      }
                                                    }
                                                    defaultPopupVisible={false}
                                                    destroyPopupOnHide={false}
                                                    focusDelay={0}
                                                    getDocument={[Function]}
                                                    getPopupClassNameFromAlign={[Function]}
                                                    getTriggerDOMNode={[Function]}
                                                    hideAction={Array []}
                                                    mask={false}
                                                    maskClosable={true}
                                                    mouseEnterDelay={0}
                                                    mouseLeaveDelay={0.1}
                                                    onPopupAlign={[Function]}
                                                    onPopupVisibleChange={[Function]}
                                                    popup={
                                                      <div
                                                        onMouseEnter={[Function]}
                                                      >
                                                        <OptionList />
                                                      </div>
                                                    }
                                                    popupAlign={Object {}}
                                                    popupClassName=""
                                                    popupPlacement="bottomLeft"
                                                    popupStyle={
                                                      Object {
                                                        "minWidth": null,
                                                        "width": null,
                                                      }
                                                    }
                                                    popupTransitionName="ant-slide-up"
                                                    prefixCls="ant-select-dropdown"
                                                    showAction={Array []}
                                                  >
                                                    <Selector
                                                      OptionList={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "displayName": "OptionList",
                                                          "render": [Function],
                                                        }
                                                      }
                                                      activeDescendantId="select_list_0"
                                                      activeValue={null}
                                                      className="ant-select-in-form-item ant-select-has-feedback"
                                                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                      displayValues={
                                                        Array [
                                                          Object {
                                                            "disabled": undefined,
                                                            "key": "china",
                                                            "label": "China",
                                                            "value": "china",
                                                          },
                                                        ]
                                                      }
                                                      domRef={
                                                        Object {
                                                          "current": <div
                                                            class="ant-select-selector"
                                                          >
                                                            <span
                                                              class="ant-select-selection-search"
                                                            >
                                                              <input
                                                                aria-activedescendant="select_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="select_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="select_list"
                                                                autocomplete="off"
                                                                class="ant-select-selection-search-input"
                                                                id="select"
                                                                readonly=""
                                                                role="combobox"
                                                                style="opacity: 0;"
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />
                                                            </span>
                                                            <span
                                                              class="ant-select-selection-item"
                                                              title="China"
                                                            >
                                                              China
                                                            </span>
                                                          </div>,
                                                        }
                                                      }
                                                      dropdownClassName=""
                                                      dropdownMatchSelectWidth={true}
                                                      emptyOptions={false}
                                                      id="select"
                                                      inputElement={null}
                                                      inputIcon={[Function]}
                                                      key="trigger"
                                                      notFoundContent={
                                                        <Context.Consumer>
                                                          [Function]
                                                        </Context.Consumer>
                                                      }
                                                      omitDomProps={
                                                        Array [
                                                          "inputValue",
                                                        ]
                                                      }
                                                      onDisplayValuesChange={[Function]}
                                                      onRemove={[Function]}
                                                      onSearch={[Function]}
                                                      onSearchSplit={[Function]}
                                                      onSearchSubmit={[Function]}
                                                      onToggleOpen={[Function]}
                                                      placeholder="Please select a country"
                                                      placement="bottomLeft"
                                                      prefixCls="ant-select"
                                                      removeIcon={<ForwardRef(CloseOutlined) />}
                                                      searchValue=""
                                                      showArrow={true}
                                                      showSearch={false}
                                                      tokenWithEnter={false}
                                                      transitionName="ant-slide-up"
                                                      values={
                                                        Array [
                                                          Object {
                                                            "disabled": undefined,
                                                            "key": "china",
                                                            "label": "China",
                                                            "value": "china",
                                                          },
                                                        ]
                                                      }
                                                    >
                                                      <div
                                                        className="ant-select-selector"
                                                        onClick={[Function]}
                                                        onMouseDown={[Function]}
                                                      >
                                                        <SingleSelector
                                                          OptionList={
                                                            Object {
                                                              "$$typeof": Symbol(react.forward_ref),
                                                              "displayName": "OptionList",
                                                              "render": [Function],
                                                            }
                                                          }
                                                          activeDescendantId="select_list_0"
                                                          activeValue={null}
                                                          className="ant-select-in-form-item ant-select-has-feedback"
                                                          clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                          displayValues={
                                                            Array [
                                                              Object {
                                                                "disabled": undefined,
                                                                "key": "china",
                                                                "label": "China",
                                                                "value": "china",
                                                              },
                                                            ]
                                                          }
                                                          domRef={
                                                            Object {
                                                              "current": <div
                                                                class="ant-select-selector"
                                                              >
                                                                <span
                                                                  class="ant-select-selection-search"
                                                                >
                                                                  <input
                                                                    aria-activedescendant="select_list_0"
                                                                    aria-autocomplete="list"
                                                                    aria-controls="select_list"
                                                                    aria-haspopup="listbox"
                                                                    aria-owns="select_list"
                                                                    autocomplete="off"
                                                                    class="ant-select-selection-search-input"
                                                                    id="select"
                                                                    readonly=""
                                                                    role="combobox"
                                                                    style="opacity: 0;"
                                                                    type="search"
                                                                    unselectable="on"
                                                                    value=""
                                                                  />
                                                                </span>
                                                                <span
                                                                  class="ant-select-selection-item"
                                                                  title="China"
                                                                >
                                                                  China
                                                                </span>
                                                              </div>,
                                                            }
                                                          }
                                                          dropdownClassName=""
                                                          dropdownMatchSelectWidth={true}
                                                          emptyOptions={false}
                                                          id="select"
                                                          inputElement={null}
                                                          inputIcon={[Function]}
                                                          inputRef={
                                                            Object {
                                                              "current": <input
                                                                aria-activedescendant="select_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="select_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="select_list"
                                                                autocomplete="off"
                                                                class="ant-select-selection-search-input"
                                                                id="select"
                                                                readonly=""
                                                                role="combobox"
                                                                style="opacity: 0;"
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />,
                                                            }
                                                          }
                                                          notFoundContent={
                                                            <Context.Consumer>
                                                              [Function]
                                                            </Context.Consumer>
                                                          }
                                                          omitDomProps={
                                                            Array [
                                                              "inputValue",
                                                            ]
                                                          }
                                                          onDisplayValuesChange={[Function]}
                                                          onInputChange={[Function]}
                                                          onInputCompositionEnd={[Function]}
                                                          onInputCompositionStart={[Function]}
                                                          onInputKeyDown={[Function]}
                                                          onInputMouseDown={[Function]}
                                                          onInputPaste={[Function]}
                                                          onRemove={[Function]}
                                                          onSearch={[Function]}
                                                          onSearchSplit={[Function]}
                                                          onSearchSubmit={[Function]}
                                                          onToggleOpen={[Function]}
                                                          placeholder="Please select a country"
                                                          placement="bottomLeft"
                                                          prefixCls="ant-select"
                                                          removeIcon={<ForwardRef(CloseOutlined) />}
                                                          searchValue=""
                                                          showArrow={true}
                                                          showSearch={false}
                                                          tokenWithEnter={false}
                                                          transitionName="ant-slide-up"
                                                          values={
                                                            Array [
                                                              Object {
                                                                "disabled": undefined,
                                                                "key": "china",
                                                                "label": "China",
                                                                "value": "china",
                                                              },
                                                            ]
                                                          }
                                                        >
                                                          <span
                                                            className="ant-select-selection-search"
                                                          >
                                                            <Input
                                                              activeDescendantId="select_list_0"
                                                              attrs={Object {}}
                                                              editable={false}
                                                              id="select"
                                                              inputElement={null}
                                                              onChange={[Function]}
                                                              onCompositionEnd={[Function]}
                                                              onCompositionStart={[Function]}
                                                              onKeyDown={[Function]}
                                                              onMouseDown={[Function]}
                                                              onPaste={[Function]}
                                                              prefixCls="ant-select"
                                                              value=""
                                                            >
                                                              <input
                                                                aria-activedescendant="select_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="select_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="select_list"
                                                                autoComplete="off"
                                                                className="ant-select-selection-search-input"
                                                                id="select"
                                                                onChange={[Function]}
                                                                onCompositionEnd={[Function]}
                                                                onCompositionStart={[Function]}
                                                                onKeyDown={[Function]}
                                                                onMouseDown={[Function]}
                                                                onPaste={[Function]}
                                                                readOnly={true}
                                                                role="combobox"
                                                                style={
                                                                  Object {
                                                                    "opacity": 0,
                                                                  }
                                                                }
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />
                                                            </Input>
                                                          </span>
                                                          <span
                                                            className="ant-select-selection-item"
                                                            title="China"
                                                          >
                                                            China
                                                          </span>
                                                        </SingleSelector>
                                                      </div>
                                                    </Selector>
                                                  </Trigger>
                                                </SelectTrigger>
                                                <TransBtn
                                                  className="ant-select-arrow"
                                                  customizeIcon={[Function]}
                                                  customizeIconProps={
                                                    Object {
                                                      "focused": false,
                                                      "loading": undefined,
                                                      "open": undefined,
                                                      "searchValue": "",
                                                      "showSearch": false,
                                                    }
                                                  }
                                                >
                                                  <span
                                                    aria-hidden={true}
                                                    className="ant-select-arrow"
                                                    onMouseDown={[Function]}
                                                    style={
                                                      Object {
                                                        "WebkitUserSelect": "none",
                                                        "userSelect": "none",
                                                      }
                                                    }
                                                    unselectable="on"
                                                  >
                                                    <ForwardRef(DownOutlined)
                                                      className="ant-select-suffix"
                                                    >
                                                      <AntdIcon
                                                        className="ant-select-suffix"
                                                        icon={
                                                          Object {
                                                            "icon": Object {
                                                              "attrs": Object {
                                                                "focusable": "false",
                                                                "viewBox": "64 64 896 896",
                                                              },
                                                              "children": Array [
                                                                Object {
                                                                  "attrs": Object {
                                                                    "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                                                  },
                                                                  "tag": "path",
                                                                },
                                                              ],
                                                              "tag": "svg",
                                                            },
                                                            "name": "down",
                                                            "theme": "outlined",
                                                          }
                                                        }
                                                      >
                                                        <span
                                                          aria-label="down"
                                                          className="anticon anticon-down ant-select-suffix"
                                                          role="img"
                                                        >
                                                          <IconReact
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "down",
                                                                "theme": "outlined",
                                                              }
                                                            }
                                                          >
                                                            <svg
                                                              aria-hidden="true"
                                                              data-icon="down"
                                                              fill="currentColor"
                                                              focusable="false"
                                                              height="1em"
                                                              key="svg-down"
                                                              viewBox="64 64 896 896"
                                                              width="1em"
                                                            >
                                                              <path
                                                                d="M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z"
                                                                key="svg-down-svg-0"
                                                              />
                                                            </svg>
                                                          </IconReact>
                                                        </span>
                                                      </AntdIcon>
                                                    </ForwardRef(DownOutlined)>
                                                  </span>
                                                </TransBtn>
                                              </div>
                                            </BaseSelect>
                                          </Select>
                                        </ForwardRef(InternalSelect)>
                                      </Component>
                                    </div>
                                  </div>
                                  <ErrorList
                                    className="ant-form-item-explain-connected"
                                    errors={Array []}
                                    helpStatus=""
                                    warnings={Array []}
                                  >
                                    <CSSMotion
                                      motionAppear={false}
                                      motionDeadline={500}
                                      motionEnter={false}
                                      motionName="ant-show-help"
                                      onAppearActive={[Function]}
                                      onAppearEnd={[Function]}
                                      onAppearStart={[Function]}
                                      onEnterActive={[Function]}
                                      onEnterEnd={[Function]}
                                      onEnterStart={[Function]}
                                      onLeaveActive={[Function]}
                                      onLeaveEnd={[Function]}
                                      onLeaveStart={[Function]}
                                      visible={false}
                                    >
                                      <DomWrapper />
                                    </CSSMotion>
                                  </ErrorList>
                                </div>
                              </Col>
                            </FormItemInput>
                          </div>
                        </Row>
                      </Field>
                    </WrapperField>
                  </FormItem>
                </div>
              </Col>
              <Col
                span={8}
              >
                <div
                  className="ant-col ant-col-8"
                  role="cell"
                  style={
                    Object {
                      "paddingLeft": 12,
                      "paddingRight": 12,
                    }
                  }
                >
                  <FormItem
                    hasFeedback={true}
                    label="Input"
                    name="input"
                  >
                    <WrapperField
                      hasFeedback={true}
                      label="Input"
                      messageVariables={
                        Object {
                          "label": "Input",
                        }
                      }
                      name="input"
                      onMetaChange={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                    >
                      <Field
                        fieldContext={
                          Object {
                            "__INTERNAL__": Object {
                              "itemRef": [Function],
                              "name": undefined,
                            },
                            "_init": true,
                            "getFieldError": [Function],
                            "getFieldInstance": [Function],
                            "getFieldValue": [Function],
                            "getFieldWarning": [Function],
                            "getFieldsError": [Function],
                            "getFieldsValue": [Function],
                            "getInternalHooks": [Function],
                            "isFieldTouched": [Function],
                            "isFieldValidating": [Function],
                            "isFieldsTouched": [Function],
                            "isFieldsValidating": [Function],
                            "resetFields": [Function],
                            "scrollToField": [Function],
                            "setFields": [Function],
                            "setFieldsValue": [Function],
                            "submit": [Function],
                            "validateFields": [Function],
                            "validateTrigger": "onChange",
                          }
                        }
                        hasFeedback={true}
                        key="_input"
                        label="Input"
                        messageVariables={
                          Object {
                            "label": "Input",
                          }
                        }
                        name={
                          Array [
                            "input",
                          ]
                        }
                        onMetaChange={[Function]}
                        trigger="onChange"
                        validateTrigger="onChange"
                        valuePropName="value"
                      >
                        <Row
                          className="ant-form-item"
                          key="row"
                        >
                          <div
                            className="ant-row ant-form-item"
                            role="row"
                            style={Object {}}
                          >
                            <FormItemLabel
                              hasFeedback={true}
                              htmlFor="input"
                              label="Input"
                              name="input"
                              prefixCls="ant-form"
                              required={false}
                              requiredMark={true}
                            >
                              <Col
                                className="ant-form-item-label"
                              >
                                <div
                                  className="ant-col ant-form-item-label"
                                  role="cell"
                                  style={Object {}}
                                >
                                  <label
                                    className=""
                                    htmlFor="input"
                                    title="Input"
                                  >
                                    Input
                                  </label>
                                </div>
                              </Col>
                            </FormItemLabel>
                            <FormItemInput
                              errors={Array []}
                              hasFeedback={true}
                              label="Input"
                              name={Array []}
                              prefixCls="ant-form"
                              status=""
                              touched={false}
                              validating={false}
                              warnings={Array []}
                            >
                              <Col
                                className="ant-form-item-control"
                              >
                                <div
                                  className="ant-col ant-form-item-control"
                                  role="cell"
                                  style={Object {}}
                                >
                                  <div
                                    className="ant-form-item-control-input"
                                  >
                                    <div
                                      className="ant-form-item-control-input-content"
                                    >
                                      <Component
                                        update={<ForwardRef />}
                                      >
                                        <ForwardRef
                                          id="input"
                                          onChange={[Function]}
                                        >
                                          <ForwardRef
                                            affixWrapperClassName="ant-input-affix-wrapper-has-feedback"
                                            groupClassName="ant-input-group-wrapper-has-feedback"
                                            id="input"
                                            inputClassName=""
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            prefixCls="ant-input"
                                            suffix={<React.Fragment />}
                                            wrapperClassName=""
                                          >
                                            <BaseInput
                                              affixWrapperClassName="ant-input-affix-wrapper-has-feedback"
                                              focused={false}
                                              groupClassName="ant-input-group-wrapper-has-feedback"
                                              handleReset={[Function]}
                                              id="input"
                                              inputElement={
                                                <input
                                                  className="ant-input"
                                                  id="input"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  type="text"
                                                />
                                              }
                                              prefixCls="ant-input"
                                              suffix={
                                                <React.Fragment>
                                                  <React.Fragment />
                                                </React.Fragment>
                                              }
                                              triggerFocus={[Function]}
                                              value=""
                                              wrapperClassName=""
                                            >
                                              <span
                                                className="ant-input-affix-wrapper ant-input-affix-wrapper-has-feedback"
                                                onMouseDown={[Function]}
                                              >
                                                <input
                                                  className="ant-input"
                                                  hidden={null}
                                                  id="input"
                                                  onBlur={[Function]}
                                                  onChange={[Function]}
                                                  onFocus={[Function]}
                                                  onKeyDown={[Function]}
                                                  style={null}
                                                  type="text"
                                                  value=""
                                                />
                                                <span
                                                  className="ant-input-suffix"
                                                />
                                              </span>
                                            </BaseInput>
                                          </ForwardRef>
                                        </ForwardRef>
                                      </Component>
                                    </div>
                                  </div>
                                  <ErrorList
                                    className="ant-form-item-explain-connected"
                                    errors={Array []}
                                    helpStatus=""
                                    warnings={Array []}
                                  >
                                    <CSSMotion
                                      motionAppear={false}
                                      motionDeadline={500}
                                      motionEnter={false}
                                      motionName="ant-show-help"
                                      onAppearActive={[Function]}
                                      onAppearEnd={[Function]}
                                      onAppearStart={[Function]}
                                      onEnterActive={[Function]}
                                      onEnterEnd={[Function]}
                                      onEnterStart={[Function]}
                                      onLeaveActive={[Function]}
                                      onLeaveEnd={[Function]}
                                      onLeaveStart={[Function]}
                                      visible={false}
                                    >
                                      <DomWrapper />
                                    </CSSMotion>
                                  </ErrorList>
                                </div>
                              </Col>
                            </FormItemInput>
                          </div>
                        </Row>
                      </Field>
                    </WrapperField>
                  </FormItem>
                </div>
              </Col>
            </div>
          </Row>
          <Row>
            <div
              className="ant-row"
              role="row"
              style={Object {}}
            >
              <Col
                span={24}
                style={
                  Object {
                    "textAlign": "right",
                  }
                }
              >
                <div
                  className="ant-col ant-col-24"
                  role="cell"
                  style={
                    Object {
                      "textAlign": "right",
                    }
                  }
                >
                  <Button
                    htmlType="submit"
                    type="primary"
                  >
                    <Wave
                      disabled={false}
                    >
                      <button
                        className="ant-btn ant-btn-primary"
                        onClick={[Function]}
                        type="submit"
                      >
                        <LoadingIcon
                          existIcon={false}
                          loading={false}
                          prefixCls="ant-btn"
                        >
                          <CSSMotion
                            motionName="ant-btn-loading-icon-motion"
                            onAppearActive={[Function]}
                            onAppearStart={[Function]}
                            onEnterActive={[Function]}
                            onEnterStart={[Function]}
                            onLeaveActive={[Function]}
                            onLeaveStart={[Function]}
                            removeOnLeave={true}
                            visible={false}
                          >
                            <DomWrapper />
                          </CSSMotion>
                        </LoadingIcon>
                        <span
                          key=".0"
                        >
                          Search
                        </span>
                      </button>
                    </Wave>
                  </Button>
                  <Button
                    onClick={[Function]}
                    style={
                      Object {
                        "margin": "0 8px",
                      }
                    }
                  >
                    <Wave
                      disabled={false}
                    >
                      <button
                        className="ant-btn ant-btn-default"
                        onClick={[Function]}
                        style={
                          Object {
                            "margin": "0 8px",
                          }
                        }
                        type="button"
                      >
                        <LoadingIcon
                          existIcon={false}
                          loading={false}
                          prefixCls="ant-btn"
                        >
                          <CSSMotion
                            motionName="ant-btn-loading-icon-motion"
                            onAppearActive={[Function]}
                            onAppearStart={[Function]}
                            onEnterActive={[Function]}
                            onEnterStart={[Function]}
                            onLeaveActive={[Function]}
                            onLeaveStart={[Function]}
                            removeOnLeave={true}
                            visible={false}
                          >
                            <DomWrapper />
                          </CSSMotion>
                        </LoadingIcon>
                        <span
                          key=".0"
                        >
                          Reset
                        </span>
                      </button>
                    </Wave>
                  </Button>
                </div>
              </Col>
            </div>
          </Row>
        </form>
      </ForwardRef(Form)>
    </SizeContextProvider>
  </ForwardRef(InternalForm)>
</Filter>
`;

exports[`filter 搜索框快照 shallow 快照 1`] = `
<ForwardRef(InternalForm)
  form={
    Object {
      "__INTERNAL__": Object {
        "itemRef": [Function],
      },
      "_init": true,
      "getFieldError": [Function],
      "getFieldInstance": [Function],
      "getFieldValue": [Function],
      "getFieldWarning": [Function],
      "getFieldsError": [Function],
      "getFieldsValue": [Function],
      "getInternalHooks": [Function],
      "isFieldTouched": [Function],
      "isFieldValidating": [Function],
      "isFieldsTouched": [Function],
      "isFieldsValidating": [Function],
      "resetFields": [Function],
      "scrollToField": [Function],
      "setFields": [Function],
      "setFieldsValue": [Function],
      "submit": [Function],
      "validateFields": [Function],
    }
  }
  onFinish={[MockFunction]}
>
  <Row
    gutter={24}
  >
    <Col
      span={8}
    >
      <FormItem
        hasFeedback={true}
        initialValue="china"
        label="Select"
        name="select"
      >
        <ForwardRef(InternalSelect)
          placeholder="Please select a country"
        >
          <Option
            value="china"
          >
            China
          </Option>
          <Option
            value="usa"
          >
            U.S.A
          </Option>
        </ForwardRef(InternalSelect)>
      </FormItem>
    </Col>
    <Col
      span={8}
    >
      <FormItem
        hasFeedback={true}
        label="Input"
        name="input"
      >
        <ForwardRef />
      </FormItem>
    </Col>
  </Row>
  <Row>
    <Col
      span={24}
      style={
        Object {
          "textAlign": "right",
        }
      }
    >
      <Button
        htmlType="submit"
        type="primary"
      >
        Search
      </Button>
      <Button
        onClick={[Function]}
        style={
          Object {
            "margin": "0 8px",
          }
        }
      >
        Reset
      </Button>
    </Col>
  </Row>
</ForwardRef(InternalForm)>
`;
